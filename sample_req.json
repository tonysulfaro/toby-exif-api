server: [Server
],
_server: [Server
],
timeout: 120000,
parser: [HTTPParser
],
on: [Function: socketListenerWrap
],
addListener: [Function: socketListenerWrap
],
prependListener: [Function: socketListenerWrap
],
_paused: false,
_httpMessage: [Circular
],
[Symbol(asyncId)
]: 13,
[Symbol(kHandle)
]: [TCP
],
[Symbol(lastWriteQueueSize)
]: 0,
[Symbol(timeout)
]: Timeout {
  _idleTimeout: 120000,
  _idlePrev: [Timeout
  ],
  _idleNext: [TimersList
  ],
  _idleStart: 2674,
  _onTimeout: [Function: bound
  ],
  _timerArgs: undefined,
  _repeat: null,
  _destroyed: false,
  [Symbol(refed)
  ]: false,
  [Symbol(asyncId)
  ]: 14,
  [Symbol(triggerId)
  ]: 13
},
[Symbol(kBuffer)
]: null,
[Symbol(kBufferCb)
]: null,
[Symbol(kBufferGen)
]: null,
[Symbol(kBytesRead)
]: 0,
[Symbol(kBytesWritten)
]: 0
},
_header: null,
_onPendingData: [Function: bound updateOutgoingData
],
_sent100: false,
_expect_continue: false,
req: [Circular
],
locals: [Object: null prototype
] {},
[Symbol(kNeedDrain)
]: false,
[Symbol(isCorked)
]: false,
[Symbol(kOutHeaders)
]: [Object: null prototype
] {
'x-powered-by': [Array
],
'access-control-allow-origin': [Array
]
}
},
route: Route {
path: '/cords',
stack: [
[Layer
],
[Layer
]
],
methods: { post: true
}
}
}
{
image: {
Make: 'Apple',
Model: 'iPhone XS',
Orientation: 1,
XResolution: 72,
YResolution: 72,
ResolutionUnit: 2,
Software: '13.3.1',
ModifyDate: '2020: 02: 02 13: 09: 25',
YCbCrPositioning: 1,
ExifOffset: 206,
GPSInfo: 2002
},
thumbnail: {
Compression: 6,
XResolution: 72,
YResolution: 72,
ResolutionUnit: 2,
ThumbnailOffset: 2370,
ThumbnailLength: 9090
},
exif: {
ExposureTime: 0.0036231884057971015,
FNumber: 2.4,
ExposureProgram: 2,
ISO: 16,
ExifVersion: <Buffer 30 32 32 31>,
DateTimeOriginal: '2020: 02: 02 13: 09: 25',
CreateDate: '2020: 02: 02 13: 09: 25',
ComponentsConfiguration: <Buffer 01 02 03 00>,
ShutterSpeedValue: 8.106609828806697,
ApertureValue: 2.526068811662211,
BrightnessValue: 9.164952870608397,
ExposureCompensation: 0,
MeteringMode: 5,
Flash: 16,
FocalLength: 6,
SubjectArea: [
1934,
827,
628,
659
],
MakerNote: <Buffer 41 70 70 6c 65 20 69 4f 53 00 00 01 4d 4d 00 1a 00 01 00 09 00 00 00 01 00 00 00 0b 00 02 00 07 00 00 02 2e 00 00 01 4c 00 03 00 07 00 00 00 68 00 00 ... 1092 more bytes>,
SubSecTimeOriginal: '219',
SubSecTimeDigitized: '219',
FlashpixVersion: <Buffer 30 31 30 30>,
ColorSpace: 65535,
ExifImageWidth: 4032,
ExifImageHeight: 3024,
SensingMethod: 2,
SceneType: <Buffer 01>,
CustomRendered: 8,
ExposureMode: 0,
WhiteBalance: 0,
FocalLengthIn35mmFormat: 52,
SceneCaptureType: 0,
LensInfo: [
4.25,
6,
1.8,
2.4
],
LensMake: 'Apple',
LensModel: 'iPhone XS back dual camera 6mm f/2.4'
},
gps: {
tony@Anthonys-MacBook-Pro api % node app.js
Toby Exif Viewer listening on port 3000!
IncomingMessage {
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0
  },
length: 0,
pipes: null,
pipesCount: 0,
flowing: null,
ended: false,
endEmitted: false,
reading: false,
sync: true,
needReadable: false,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
paused: true,
emitClose: true,
autoDestroy: false,
destroyed: false,
defaultEncoding: 'utf8',
awaitDrain: 0,
readingMore: true,
decoder: null,
encoding: null
},
readable: true,
_events: [Object: null prototype
] {
end: [Function: resetHeadersTimeoutOnReqEnd
  ]
},
_eventsCount: 1,
_maxListeners: undefined,
socket: Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0
    },
length: 0,
pipes: null,
pipesCount: 0,
flowing: true,
ended: false,
endEmitted: false,
reading: true,
sync: false,
needReadable: true,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
paused: false,
emitClose: false,
autoDestroy: false,
destroyed: false,
defaultEncoding: 'utf8',
awaitDrain: 0,
readingMore: false,
decoder: null,
encoding: null
  },
readable: true,
_events: [Object: null prototype
  ] {
end: [Array
    ],
timeout: [Function: socketOnTimeout
    ],
data: [Function: bound socketOnData
    ],
error: [Function: socketOnError
    ],
close: [Array
    ],
drain: [Function: bound socketOnDrain
    ],
resume: [Function: onSocketResume
    ],
pause: [Function: onSocketPause
    ]
  },
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
objectMode: false,
highWaterMark: 16384,
finalCalled: false,
needDrain: false,
ending: false,
ended: false,
finished: false,
destroyed: false,
decodeStrings: false,
defaultEncoding: 'utf8',
length: 0,
writing: false,
corked: 0,
sync: true,
bufferProcessing: false,
onwrite: [Function: bound onwrite
    ],
writecb: null,
writelen: 0,
bufferedRequest: null,
lastBufferedRequest: null,
pendingcb: 0,
prefinished: false,
errorEmitted: false,
emitClose: false,
autoDestroy: false,
bufferedRequestCount: 0,
corkedRequestsFree: [Object
    ]
  },
writable: true,
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
_server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
timeout: 120000,
parser: HTTPParser {
'0': [Function: parserOnHeaders
    ],
'1': [Function: parserOnHeadersComplete
    ],
'2': [Function: parserOnBody
    ],
'3': [Function: parserOnMessageComplete
    ],
'4': [Function: bound onParserExecute
    ],
_headers: [],
_url: '',
socket: [Circular
    ],
incoming: [Circular
    ],
outgoing: null,
maxHeaderPairs: 2000,
_consumed: true,
onIncoming: [Function: bound parserOnIncoming
    ],
parsingHeadersStart: 0
  },
on: [Function: socketListenerWrap
  ],
addListener: [Function: socketListenerWrap
  ],
prependListener: [Function: socketListenerWrap
  ],
_paused: false,
_httpMessage: ServerResponse {
_events: [Object: null prototype
    ],
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: [Circular
    ],
connection: [Circular
    ],
_header: null,
_onPendingData: [Function: bound updateOutgoingData
    ],
_sent100: false,
_expect_continue: false,
req: [Circular
    ],
locals: [Object: null prototype
    ] {},
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(isCorked)
    ]: false,
    [Symbol(kOutHeaders)
    ]: [Object: null prototype
    ]
  },
  [Symbol(asyncId)
  ]: 13,
  [Symbol(kHandle)
  ]: TCP {
reading: true,
onconnection: null,
_consumed: true,
    [Symbol(owner)
    ]: [Circular
    ]
  },
  [Symbol(lastWriteQueueSize)
  ]: 0,
  [Symbol(timeout)
  ]: Timeout {
_idleTimeout: 120000,
_idlePrev: [Timeout
    ],
_idleNext: [TimersList
    ],
_idleStart: 1909,
_onTimeout: [Function: bound
    ],
_timerArgs: undefined,
_repeat: null,
_destroyed: false,
    [Symbol(refed)
    ]: false,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerId)
    ]: 13
  },
  [Symbol(kBuffer)
  ]: null,
  [Symbol(kBufferCb)
  ]: null,
  [Symbol(kBufferGen)
  ]: null,
  [Symbol(kBytesRead)
  ]: 0,
  [Symbol(kBytesWritten)
  ]: 0
},
connection: Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0
    },
length: 0,
pipes: null,
pipesCount: 0,
flowing: true,
ended: false,
endEmitted: false,
reading: true,
sync: false,
needReadable: true,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
paused: false,
emitClose: false,
autoDestroy: false,
destroyed: false,
defaultEncoding: 'utf8',
awaitDrain: 0,
readingMore: false,
decoder: null,
encoding: null
  },
readable: true,
_events: [Object: null prototype
  ] {
end: [Array
    ],
timeout: [Function: socketOnTimeout
    ],
data: [Function: bound socketOnData
    ],
error: [Function: socketOnError
    ],
close: [Array
    ],
drain: [Function: bound socketOnDrain
    ],
resume: [Function: onSocketResume
    ],
pause: [Function: onSocketPause
    ]
  },
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
objectMode: false,
highWaterMark: 16384,
finalCalled: false,
needDrain: false,
ending: false,
ended: false,
finished: false,
destroyed: false,
decodeStrings: false,
defaultEncoding: 'utf8',
length: 0,
writing: false,
corked: 0,
sync: true,
bufferProcessing: false,
onwrite: [Function: bound onwrite
    ],
writecb: null,
writelen: 0,
bufferedRequest: null,
lastBufferedRequest: null,
pendingcb: 0,
prefinished: false,
errorEmitted: false,
emitClose: false,
autoDestroy: false,
bufferedRequestCount: 0,
corkedRequestsFree: [Object
    ]
  },
writable: true,
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
_server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
timeout: 120000,
parser: HTTPParser {
'0': [Function: parserOnHeaders
    ],
'1': [Function: parserOnHeadersComplete
    ],
'2': [Function: parserOnBody
    ],
'3': [Function: parserOnMessageComplete
    ],
'4': [Function: bound onParserExecute
    ],
_headers: [],
_url: '',
socket: [Circular
    ],
incoming: [Circular
    ],
outgoing: null,
maxHeaderPairs: 2000,
_consumed: true,
onIncoming: [Function: bound parserOnIncoming
    ],
parsingHeadersStart: 0
  },
on: [Function: socketListenerWrap
  ],
addListener: [Function: socketListenerWrap
  ],
prependListener: [Function: socketListenerWrap
  ],
_paused: false,
_httpMessage: ServerResponse {
_events: [Object: null prototype
    ],
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: [Circular
    ],
connection: [Circular
    ],
_header: null,
_onPendingData: [Function: bound updateOutgoingData
    ],
_sent100: false,
_expect_continue: false,
req: [Circular
    ],
locals: [Object: null prototype
    ] {},
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(isCorked)
    ]: false,
    [Symbol(kOutHeaders)
    ]: [Object: null prototype
    ]
  },
  [Symbol(asyncId)
  ]: 13,
  [Symbol(kHandle)
  ]: TCP {
reading: true,
onconnection: null,
_consumed: true,
    [Symbol(owner)
    ]: [Circular
    ]
  },
  [Symbol(lastWriteQueueSize)
  ]: 0,
  [Symbol(timeout)
  ]: Timeout {
_idleTimeout: 120000,
_idlePrev: [Timeout
    ],
_idleNext: [TimersList
    ],
_idleStart: 1909,
_onTimeout: [Function: bound
    ],
_timerArgs: undefined,
_repeat: null,
_destroyed: false,
    [Symbol(refed)
    ]: false,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerId)
    ]: 13
  },
  [Symbol(kBuffer)
  ]: null,
  [Symbol(kBufferCb)
  ]: null,
  [Symbol(kBufferGen)
  ]: null,
  [Symbol(kBytesRead)
  ]: 0,
  [Symbol(kBytesWritten)
  ]: 0
},
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: false,
headers: {
'user-agent': 'PostmanRuntime/7.22.0',
accept: '* /*',
'cache-control': 'no-cache',
'postman-token': '6203d5f3-8287-4fc9-b71d-4d85fa9c1286',
host: 'localhost:3000',
'accept-encoding': 'gzip, deflate, br',
'content-length': '1808205',
'content-type': 'image/jpeg',
connection: 'keep-alive'
},
rawHeaders: [
'User-Agent',
'PostmanRuntime/7.22.0',
'Accept',
'*/*',
'Cache-Control',
'no-cache',
'Postman-Token',
'6203d5f3-8287-4fc9-b71d-4d85fa9c1286',
'Host',
'localhost: 3000',
'Accept-Encoding',
'gzip, deflate, br',
'Content-Length',
'1808205',
'Content-Type',
'image/jpeg',
'Connection',
'keep-alive'
],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '/cords',
method: 'POST',
statusCode: null,
statusMessage: null,
client: Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0
    },
length: 0,
pipes: null,
pipesCount: 0,
flowing: true,
ended: false,
endEmitted: false,
reading: true,
sync: false,
needReadable: true,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
paused: false,
emitClose: false,
autoDestroy: false,
destroyed: false,
defaultEncoding: 'utf8',
awaitDrain: 0,
readingMore: false,
decoder: null,
encoding: null
  },
readable: true,
_events: [Object: null prototype
  ] {
end: [Array
    ],
timeout: [Function: socketOnTimeout
    ],
data: [Function: bound socketOnData
    ],
error: [Function: socketOnError
    ],
close: [Array
    ],
drain: [Function: bound socketOnDrain
    ],
resume: [Function: onSocketResume
    ],
pause: [Function: onSocketPause
    ]
  },
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
objectMode: false,
highWaterMark: 16384,
finalCalled: false,
needDrain: false,
ending: false,
ended: false,
finished: false,
destroyed: false,
decodeStrings: false,
defaultEncoding: 'utf8',
length: 0,
writing: false,
corked: 0,
sync: true,
bufferProcessing: false,
onwrite: [Function: bound onwrite
    ],
writecb: null,
writelen: 0,
bufferedRequest: null,
lastBufferedRequest: null,
pendingcb: 0,
prefinished: false,
errorEmitted: false,
emitClose: false,
autoDestroy: false,
bufferedRequestCount: 0,
corkedRequestsFree: [Object
    ]
  },
writable: true,
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
_server: Server {
_events: [Object: null prototype
    ],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 2,
_handle: [TCP
    ],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
maxHeadersCount: null,
headersTimeout: 40000,
_connectionKey: '6: : : : 3000',
    [Symbol(IncomingMessage)
    ]: [Function: IncomingMessage
    ],
    [Symbol(ServerResponse)
    ]: [Function: ServerResponse
    ],
    [Symbol(asyncId)
    ]: 4
  },
timeout: 120000,
parser: HTTPParser {
'0': [Function: parserOnHeaders
    ],
'1': [Function: parserOnHeadersComplete
    ],
'2': [Function: parserOnBody
    ],
'3': [Function: parserOnMessageComplete
    ],
'4': [Function: bound onParserExecute
    ],
_headers: [],
_url: '',
socket: [Circular
    ],
incoming: [Circular
    ],
outgoing: null,
maxHeaderPairs: 2000,
_consumed: true,
onIncoming: [Function: bound parserOnIncoming
    ],
parsingHeadersStart: 0
  },
on: [Function: socketListenerWrap
  ],
addListener: [Function: socketListenerWrap
  ],
prependListener: [Function: socketListenerWrap
  ],
_paused: false,
_httpMessage: ServerResponse {
_events: [Object: null prototype
    ],
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: [Circular
    ],
connection: [Circular
    ],
_header: null,
_onPendingData: [Function: bound updateOutgoingData
    ],
_sent100: false,
_expect_continue: false,
req: [Circular
    ],
locals: [Object: null prototype
    ] {},
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(isCorked)
    ]: false,
    [Symbol(kOutHeaders)
    ]: [Object: null prototype
    ]
  },
  [Symbol(asyncId)
  ]: 13,
  [Symbol(kHandle)
  ]: TCP {
reading: true,
onconnection: null,
_consumed: true,
    [Symbol(owner)
    ]: [Circular
    ]
  },
  [Symbol(lastWriteQueueSize)
  ]: 0,
  [Symbol(timeout)
  ]: Timeout {
_idleTimeout: 120000,
_idlePrev: [Timeout
    ],
_idleNext: [TimersList
    ],
_idleStart: 1909,
_onTimeout: [Function: bound
    ],
_timerArgs: undefined,
_repeat: null,
_destroyed: false,
    [Symbol(refed)
    ]: false,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerId)
    ]: 13
  },
  [Symbol(kBuffer)
  ]: null,
  [Symbol(kBufferCb)
  ]: null,
  [Symbol(kBufferGen)
  ]: null,
  [Symbol(kBytesRead)
  ]: 0,
  [Symbol(kBytesWritten)
  ]: 0
},
_consuming: false,
_dumped: false,
next: [Function: next
],
baseUrl: '',
originalUrl: '/cords',
_parsedUrl: Url {
protocol: null,
slashes: null,
auth: null,
host: null,
port: null,
hostname: null,
hash: null,
search: null,
query: null,
pathname: '/cords',
path: '/cords',
href: '/cords',
_raw: '/cords'
},
params: {},
query: {},
res: ServerResponse {
_events: [Object: null prototype
  ] { finish: [Function: bound resOnFinish
    ]
  },
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
socket: Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: [ReadableState
    ],
readable: true,
_events: [Object: null prototype
    ],
_eventsCount: 8,
_maxListeners: undefined,
_writableState: [WritableState
    ],
writable: true,
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: [Server
    ],
_server: [Server
    ],
timeout: 120000,
parser: [HTTPParser
    ],
on: [Function: socketListenerWrap
    ],
addListener: [Function: socketListenerWrap
    ],
prependListener: [Function: socketListenerWrap
    ],
_paused: false,
_httpMessage: [Circular
    ],
    [Symbol(asyncId)
    ]: 13,
    [Symbol(kHandle)
    ]: [TCP
    ],
    [Symbol(lastWriteQueueSize)
    ]: 0,
    [Symbol(timeout)
    ]: Timeout {
  _idleTimeout: 120000,
  _idlePrev: [Timeout
      ],
  _idleNext: [TimersList
      ],
  _idleStart: 1909,
  _onTimeout: [Function: bound
      ],
  _timerArgs: undefined,
  _repeat: null,
  _destroyed: false,
      [Symbol(refed)
      ]: false,
      [Symbol(asyncId)
      ]: 14,
      [Symbol(triggerId)
      ]: 13
    },
    [Symbol(kBuffer)
    ]: null,
    [Symbol(kBufferCb)
    ]: null,
    [Symbol(kBufferGen)
    ]: null,
    [Symbol(kBytesRead)
    ]: 0,
    [Symbol(kBytesWritten)
    ]: 0
  },
connection: Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: [ReadableState
    ],
readable: true,
_events: [Object: null prototype
    ],
_eventsCount: 8,
_maxListeners: undefined,
_writableState: [WritableState
    ],
writable: true,
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: [Server
    ],
_server: [Server
    ],
timeout: 120000,
parser: [HTTPParser
    ],
on: [Function: socketListenerWrap
    ],
addListener: [Function: socketListenerWrap
    ],
prependListener: [Function: socketListenerWrap
    ],
_paused: false,
_httpMessage: [Circular
    ],
    [Symbol(asyncId)
    ]: 13,
    [Symbol(kHandle)
    ]: [TCP
    ],
    [Symbol(lastWriteQueueSize)
    ]: 0,
    [Symbol(timeout)
    ]: Timeout {
  _idleTimeout: 120000,
  _idlePrev: [Timeout
      ],
  _idleNext: [TimersList
      ],
  _idleStart: 1909,
  _onTimeout: [Function: bound
      ],
  _timerArgs: undefined,
  _repeat: null,
  _destroyed: false,
      [Symbol(refed)
      ]: false,
      [Symbol(asyncId)
      ]: 14,
      [Symbol(triggerId)
      ]: 13
    },
    [Symbol(kBuffer)
    ]: null,
    [Symbol(kBufferCb)
    ]: null,
    [Symbol(kBufferGen)
    ]: null,
    [Symbol(kBytesRead)
    ]: 0,
    [Symbol(kBytesWritten)
    ]: 0
  },
_header: null,
_onPendingData: [Function: bound updateOutgoingData
  ],
_sent100: false,
_expect_continue: false,
req: [Circular
  ],
locals: [Object: null prototype
  ] {},
  [Symbol(kNeedDrain)
  ]: false,
  [Symbol(isCorked)
  ]: false,
  [Symbol(kOutHeaders)
  ]: [Object: null prototype
  ] {
'x-powered-by': [Array
    ],
'access-control-allow-origin': [Array
    ]
  }
},
route: Route {
path: '/cords',
stack: [
    [Layer
    ],
    [Layer
    ]
  ],
methods: { post: true
  }
}
}
